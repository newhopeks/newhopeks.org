<?php

/**
 * Implementation of hook_field_info().
 */
function audiofield_field_info() {
  return array(
    'file_audio' => array('label' => 'Audio file'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function audiofield_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      return $form;

    case 'validate':
      break;

    case 'save':
      return array('sample_rate', 'bitrate', 'channel_mode', 'playtime');

    case 'database columns':
      $columns = array(
        'fid' => array('type' => 'int', 'not null' => TRUE, 'default' => '0'),
        'sample_rate' => array('type' => 'int', length => 10, 'not null' => FALSE),
        'bitrate' => array('type' => 'float unsigned', 'not null' => FALSE),
        'channel_mode' => array('type' => 'varchar', length => 10, 'not null' => FALSE),
        'playtime' => array('type' => 'varchar', length => 10, 'not null' => FALSE),
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function audiofield_field($op, $node, $field, &$node_field, $a1, $a2) {
  require_once(drupal_get_path('module', 'audiofield') .'/multimediafile.inc');
  $fieldname = $field['field_name'];
  switch ($op) {
    case 'load':
      $output = array();
      if (count($node_field)) {
        $values = array();
        foreach ($node_field as $delta => $file) {
          if (!empty($file)) {
            $values[$delta]  = array_merge($node_field[$delta], _field_file_load($file['fid']));
            $node_field[$delta] = $values[$delta];
          }
          $output = array($fieldname => $values);
        }
      }
      break;

    case 'view':
      $files = array();
      foreach ($node_field as $delta => $item) {
          $node_field[$delta]['view'] = content_format($field, $item, 'default');
      }
      $output = theme('field', $node, $field, $node_field, $a1, $a2);
      break;

    case 'insert':
      foreach ($node_field as  $delta => $item) {
        $node_field[$delta] = _field_file_insert($node, $item, $field);
      }
      break;

    case 'update':
      foreach ($node_field as $delta => $item) {
        $node_field[$delta] = _field_file_update($node, $item, $field);
      }
      break;

    case 'delete':
      foreach ($node_field as $delta => $item) {
        _field_file_delete($item, $field['field_name'], $field['type']);
      }
      break;
  }
  return $output;
}

/**
 * Implementation of hook_widget_info().
 */
function audiofield_widget_info() {
  return array(
    'audio' => array(
      'label' => 'Audio file',
      'field types' => array('file_audio'),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function audiofield_widget_settings($op, $widget) {
  require_once(drupal_get_path('module', 'audiofield') .'/multimediafile.inc');
  switch ($op) {
    case 'form':
      $form = array();
      $form['upload_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to save uploaded file to'),
        '#default_value' => $widget['upload_path'] ? $widget['upload_path'] : '',
        '#size' => 64,
        '#description' => t('A directory where all files uploaded for this field instance will be saved. Example %ex.', array('%ex' => 'media/funny')),
        '#after_build' => array('_file_form_check_directory')
      );
      $form['file_extensions'] = array(
        '#type' => 'textfield',
        '#title' => t('Permitted uploaded file extensions'),
        '#default_value' => $widget['file_extensions'] ? $widget['file_extensions'] : 'mp3 wav mid',
        '#size' => 64,
        '#description' => t('Extensions a user can upload to this field. Seperate extensions with a space and do not include the leading dot.')
      );
      return $form;
    case 'validate':
      break;
    case 'save':
      return array('file_extensions', 'upload_path');
  }
}

/**
 * Implementation of hook_widget().
 */
function audiofield_widget($op, &$node, $field, &$node_field) {
  $fieldname = $field['field_name'];
  $type = $field['type'];
  require_once(drupal_get_path('module', 'audiofield') .'/multimediafile.inc');
  switch ($op) {
    case 'prepare form values':
      if (!count($_POST)) {
        _field_clear_session($field['type']);
      }

      if ($file = file_check_upload($fieldname.'_upload')) {
        $file = (array)$file;

        $ext = array_pop(explode('.', $file['filename']));
        $allowed_extensions = array_unique(explode(' ', trim($field['widget']['file_extensions'])));
        if (!in_array($ext, $allowed_extensions)) {
          form_set_error($field['field_name'] .'_upload', t('Files with the extension %ext are not allowed. Please upload a file with an extension from the following list: %allowed_extensions.', array('%ext' => $ext, '%allowed_extensions' => $field['widget']['file_extensions'])));
          return FALSE;
        }

        $file['upload_path'] = trim($field['widget']['upload_path']);

        $file['fid'] = 'upload';
        if (!$field['multiple']) {
          if (is_array($node_field)) {
            foreach ($node_field as $delta => $session_file) {
              $node_field[$delta]['flags']['delete'] = TRUE;
            }
          }
          _field_clear_field_session($fieldname, $field['type']);
        }

        // Add the file to the session
        $file['sessionid'] = count($node_field) + count($_SESSION[$type][$fieldname]);
        $_SESSION[$type][$fieldname][$file['sessionid']] = $file;
      }

      if (is_array($_SESSION[$type][$fieldname]) && count($_SESSION[$type][$fieldname])) {
        foreach ($_SESSION[$type][$fieldname] as $delta => $file) {
          $node_field[] = $file;
        }
      }
      break;

    case 'form':
      $form = _audiofield_widget_form($node, $field, $node_field);
      return $form;

    case 'validate':
      if ($field['required']) {
        if (!count($node_field)) {
          form_set_error($fieldname, t('Field %name is required', array('%name' => $field['widget']['label'])));
        }
      }
      return;

    case 'process form values':
        break;
  }
}

/**
 * A helper function to build a widget form.
 */
function _audiofield_widget_form($node, $field, &$node_field) {
  $fieldname = $field['field_name'];
  drupal_add_css(drupal_get_path('module', 'audiofield') .'/audiofield.css');

  $form = array();
  $form[$fieldname] = array(
    '#type' => 'fieldset',
    '#title' => t($field['widget']['label']),
    '#weight' => $field['widget']['weight'],
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#theme' => 'audiofield_current',
  );
  $form[$fieldname][$fieldname .'_upload'] = array(
    '#type'  => 'file',
    '#description' => ($field['widget']['description'] ? $field['widget']['description']. '<br/>' : ''). t('Allowed extensions: %ext.', array('%ext' => $field['widget']['file_extensions'])),
    '#weight' => 9,
    '#tree' => FALSE,
  );

  $form[$fieldname]['upload'] = array(
    '#type' => 'button',
    '#value' => t('Upload'),
    '#name' => 'cck_audiofield_'. $fieldname .'_op',
    '#attributes' => array('id' => $fieldname .'-attach-button'),
    '#tree' => FALSE,
    '#weight' => 10,
  );

  if (is_array($node_field) && count($node_field)) {
    foreach ($node_field as $delta => $file) {
      if ($file['filepath'] && !$file['flags']['delete']) {
        $form[$fieldname][$delta]['flags']['delete'] = array(
          '#type' => 'checkbox',
          '#default_value' => 0,
        );

        if ($file['filepath'])  {
          $form[$fieldname][$delta]['icon'] = array(
            '#type' => 'markup',
            '#value' => theme('audiofield_icon', $file),
          );

          if (strpos($file['fid'], 'upload') === false) {
            $filepath =  $file['filepath'];
          } else {
            $filepath =  file_create_filename($file['filename'], file_create_path());
          }

          $path = $filepath;
          if (strpos($file['fid'], 'upload') !== false) {
            $path =  $file['filepath'];
          }

          $info = audio_getid3_info($path);

          $description = file_create_url($filepath);
          $description = "<small>". check_plain($description) ."</small>";
          $form[$fieldname][$delta]['name'] = array('#type' => 'markup', '#value' => (strlen($file['description'])) ? $file['description'] : $file['filename'], '#maxlength' => 256, '#description' => $description );
          $form[$fieldname][$delta]['size'] = array('#type' => 'markup', '#value' => format_filesize($file['filesize']));

          $form[$fieldname][$delta]['msample_rate'] = array('#type' => 'markup', '#value' => format_samplerate($info['sample_rate']));
          $form[$fieldname][$delta]['mbitrate'] = array('#type' => 'markup', '#value' => format_bitrate($info['bitrate']));
          $form[$fieldname][$delta]['mchannel_mode'] = array('#type' => 'markup', '#value' => $info['channelmode']);
          $form[$fieldname][$delta]['mplaytime'] = array('#type' => 'markup', '#value' => $info['playtime'] .' min');

          $form[$fieldname][$delta]['filename'] = array('#type' => 'value',  '#value' => $file['filename']);
          $form[$fieldname][$delta]['filepath'] = array('#type' => 'value',  '#value' => $file['filepath']);
          $form[$fieldname][$delta]['filemime'] = array('#type' => 'value',  '#value' => $file['filemime']);
          $form[$fieldname][$delta]['filesize'] = array('#type' => 'value',  '#value' => $file['filesize']);
          $form[$fieldname][$delta]['fid'] = array('#type' => 'value',  '#value' => $file['fid']);

          $form[$fieldname][$delta]['sample_rate'] = array('#type' => 'value', '#value' => $info['sample_rate']);
          $form[$fieldname][$delta]['bitrate'] = array('#type' => 'value', '#value' => $info['bitrate']);
          $form[$fieldname][$delta]['channel_mode'] = array('#type' => 'value', '#value' => $info['channelmode']);
          $form[$fieldname][$delta]['playtime'] = array('#type' => 'value', '#value' => $info['playtime']);

          // Special handling for single value fields
          if (!$field['multiple']) {
            $form[$fieldname][$delta]['replace'] = array(
              '#type' => 'markup',
              '#value' => t('If a new file is chosen, the current file will be replaced upon submitting the form.'),
            );
          }
        }
      } elseif ($file['filepath'] && $file['flags']['delete']) {
        $form[$fieldname][$delta]['flags']['delete'] = array(
          '#type' => 'hidden', // A value type will not persist here, must be hidden
          '#value' => $file['flags']['delete'],
        );
      }
    }
  }
  return $form;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function audiofield_field_formatter_info() {
  $formatters = array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('file_audio'),
    ),
  );
  return $formatters;
}

/**
 * Implementation of hook_field_formatter().
 */
function audiofield_field_formatter($field, $item, $formatter) {
  if (!isset($item['fid'])) {
    return '';
  }
  require_once(drupal_get_path('module', 'audiofield') .'/multimediafile.inc');
  $file = _field_file_load($item['fid']);
  return theme('audiofield', $file, $item, $filed);
}

/**
 * Read media information from the specified file.
 */
function audio_getid3_info($path) {

  $info = &getID3Analyze($path);

  $result['format_name']     = @$info['fileformat'];
  $result['encoder_version'] = @$info['audio']['encoder'];
  $result['encoder_options'] = @$info['audio']['encoder_options'];
  $result['bitrate_mode']    = @$info['audio']['bitrate_mode'];
  $result['bitrate']         = @$info['audio']['bitrate'];
  $result['channelmode']     = @$info['audio']['channelmode'];
  $result['sample_rate']     = @$info['audio']['sample_rate'];
  $result['bits_per_sample'] = @$info['audio']['bits_per_sample'];
  $result['playtime']        = @$info['playtime_string'];
  $result['tags']            = @$info['tags'];
  $result['comments']        = @$info['comments'];
  $result['warning']         = @$info['warning'];

  return $result;
}

/**
 * A themed output for a currently uploaded file (used on a node edit form).
 *
 * @param array $form
 *   A form array.
 */
function theme_audiofield_current(&$form) {
  $header = array(t('Type'), t('Filename'), t('Sample rate'), t('Bitrate'), t('Channels'), t('Playtime'), t('Size'), t('Delete'));
  $output = '';

  foreach (element_children($form) as $key) {
    if (is_numeric($key)) {
      if (!($form[$key]['flags']['delete']['#type'] == 'hidden')) {
        $row = array();
        $row[] = drupal_render($form[$key]['icon']);
        $row[] = drupal_render($form[$key]['name']);
        $row[] = drupal_render($form[$key]['msample_rate']);
        $row[] = drupal_render($form[$key]['mbitrate']);
        $row[] = drupal_render($form[$key]['mchannel_mode']);
        $row[] = drupal_render($form[$key]['mplaytime']);
        $row[] = drupal_render($form[$key]['size']);
        $row[] = drupal_render($form[$key]['flags']);
        $rows[] = $row;
      } else {
        $output = drupal_render($form[$key]['flags']);
      }
    }
  }
  if (count($rows)) {
    $output .= theme('table', $header, $rows);
  }
  if (count($rows) == 1) {
    $output .= drupal_render($form[0]['replace']);
  }

  $output .= drupal_render($form);
  return $output;
}

/**
 * A themed output for an icon representing a file type.
 *
 * @param unknown_type $file
 * @return unknown
 */
function theme_audiofield_icon($file) {
  $ext = array_pop(explode('.', $file['filename']));
  $known_extensions = array(
    'm3u', 'midi', 'mid', 'mp3', 'mp4', 'wav', 'ogg', 'kar', 'mod', 's3m', 'it', 'xm', 'aac', 'voc', 'au', 'snd', 'wma'
  );
  if (!in_array($ext, $known_extensions))  {
    $ext = 'audio';
  }
  $image = theme('image', _file_get_resource_path($ext, 'audiofield'));

  return <<<OUTPUT
<div class="audiofield-icon icon-$ext">
  $image
</div>
OUTPUT;
}

/*function theme_audiofield_view_file($file, $item, $field) {
  return theme('audiofield', $file);
}*/

/**
 * Themed output for audiofield on a node view page. Called from formatter hook.
 */
function theme_audiofield($file, $item, $field) {
  $file = (array)$file;
  if (is_file($file['filepath'])) {
    if ($file['fid'] == 'upload') {
      $path = file_create_filename($file['filename'], file_create_path());
    } else {
      $path = $file['filepath'];
    }
    $name = $file['filename'];
    $desc = $file['description'];

    $item['sample_rate'] = format_samplerate($item['sample_rate']);
    $item['bitrate'] = format_bitrate($item['bitrate']);
    $item['filesize'] = format_filesize($item['filesize']);
    $url = l($name, file_create_url($path));

    $info = sprintf("<div> %s %s min %s %s (%s) </div>", $item['sample_rate'], $item['bitrate'], $url, $item['playtime'], $item['filesize']);

    return $info;
  }
}
